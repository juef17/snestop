<?xml version="1.0" encoding="UTF-8"?>
<pmd version="4.2.1" timestamp="Fri Aug 23 16:19:43 EDT 2013">
   <file name="C:/Users/Francaryse/Desktop/GameMusicEmu_20100213/src/Main.as">
      <violation beginline="111" endline="111" begincolumn="13" endcolumn="13" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="Main.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="21" endline="21" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="" class="Main.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
      <violation beginline="21" endline="21" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.ExcessiveImport" ruleset="All Flex Rules" package="" class="Main.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">A high number of imports can indicate a high degree of coupling within an object. (15 maximum but 17 actually). A high number of imports can indicate a high degree of coupling within an object. Rule counts the number of unique imports and reports a violation if the count is above the user defined threshold</violation>
      <violation beginline="21" endline="21" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="All Flex Rules" package="" class="Main.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">Too many field detected (5 maximum, but 6 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="30" endline="30" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="All Flex Rules" package="" class="Main.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 2 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="30" endline="30" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.style.ConstructorNonEmptyReturnType" ruleset="All Flex Rules" package="" class="Main.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">A constructor should not have a return type. Even if this is syntactically correct, there should not be a return type for a constructor</violation>
      <violation beginline="36" endline="36" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="All Flex Rules" package="" class="Main.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">This function is far too long (20 maximum, but 43 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
   </file>
   <file name="C:/Users/Francaryse/Desktop/GameMusicEmu_20100213/src/gme/GameMusicEmu.as">
      <violation beginline="25" endline="25" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="gme" class="GameMusicEmu.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="280" endline="280" begincolumn="41" endcolumn="41" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="gme" class="GameMusicEmu.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="20" endline="20" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="All Flex Rules" package="gme" class="GameMusicEmu.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">Too many methods detected (10 maximum, but 18 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="20" endline="20" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyPublic" ruleset="All Flex Rules" package="gme" class="GameMusicEmu.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">Too many public fields or functions detected (10 maximum, but 15 actually). A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it</violation>
      <violation beginline="20" endline="20" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="All Flex Rules" package="gme" class="GameMusicEmu.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">Too many field detected (5 maximum, but 11 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="163" endline="163" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="All Flex Rules" package="gme" class="GameMusicEmu.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 6 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="201" endline="201" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="All Flex Rules" package="gme" class="GameMusicEmu.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">This function is far too long (20 maximum, but 25 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="311" endline="311" begincolumn="28" endcolumn="28" rule="adobe.ac.pmd.rules.naming.WronglyNamedVariable" ruleset="All Flex Rules" package="gme" class="GameMusicEmu.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">This variable (tempo) seems to be incorrectly named. Let your creativity flow. </violation>
      <violation beginline="460" endline="460" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="All Flex Rules" package="gme" class="GameMusicEmu.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">This function is far too long (20 maximum, but 22 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="490" endline="490" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="gme" class="GameMusicEmu.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (s1). </violation>
      <violation beginline="491" endline="491" begincolumn="9" endcolumn="9" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="gme" class="GameMusicEmu.as" externalInfoUrl="http://opensource.adobe.com/svn/opensource/flexpmd/bin/flex-pmd-ruleset-creator.html?rule=" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (s2). </violation>
   </file>
</pmd>
